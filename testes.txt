1.

runhaskell SSInterpreter.hs "(begin (define f (lambda (x) (+ x 10))) (define result (f 40)) result)"

2.

runhaskell SSInterpreter.hs "(begin (comment foofoofoo) (if (lt? 2 5) (define a 5) (define a 2)) (set! a 10))"

3.

runhaskell SSInterpreter.hs "(begin (define n 0) (define fibonacci (lambda (n)  (if ( eqv? n 0) 0 (if ( eqv? n 1) 1 (+ (fibonacci (- n 1)) (fibonacci (- n 2))))))) (define a (fibonacci 9)))"

4.
runhaskell SSInterpreter.hs "(begin (define a (cons 2 '(1 3 4 5) )) (if (eqv? a '(2 1 3 4 5)) #t #f ))  )"



5.


runhaskell SSInterpreter.hs "(begin (define f (lambda (x) (let ((y 10) ) (+ x y)) )) (define d (lambda (y) (* y y) ) ) (define result (d (f  40 )) ) result)"


6.

runhaskell SSInterpreter.hs "(begin (define soma (lambda (lista) (if (eqv? lista '()) lista (cons (mod (car lista) 2) (soma (cdr lista) ))))) (define a (soma '(2 4 5 7 11)) ) )"
runhaskell SSInterpreter.hs "(begin (define length (lambda (lista) (if (eqv? lista '()) 0 (+ 1 (length (cdr lista) ))))) (define a (length '(2 4 5 7 11)) ) )"

7.


runhaskell SSInterpreter.hs "(begin (define partition (lambda (cond l1) (if (eqv? l1 '()) '() (if (cond (car l1)) (cons (car l1) (partition cond (cdr l1))) (partition cond (cdr l1)))))) (define quicksort (lambda (l1) (if (eqv? l1 '()) '() (let ((pivot (car l1))) (concatena (concatena (quicksort (partition (lambda (x) (lt? x pivot)) l1)) (partition (lambda (x) ( eqv? x pivot)) l1)) (quicksort (partition (lambda (x) (lt? pivot x)) l1))))))) (define ordenado (quicksort '(7 16 5 10 9 8 1))))"

8.


runhaskell SSInterpreter.hs "(begin (define b 50) (let ((i 5) (c 3)) (define f (lambda (y)  (+ i y)) ))  (f 30) )"

runhaskell SSInterpreter.hs "(begin (let ((i 1)) (define f (make-closure (lambda (y) (begin (set! i (+ i y)) i))))) (define val1 (f 1)) (define val2 (f 2)) (+ val1 val2))"
